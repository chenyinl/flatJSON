<?php
/*
 * infalte the json to multi-dimension object
 * the input must be the same order as generated by flatJson.class
 *
 * Example of a input:
 *   id, parentId, property, value type
 *   "id" will be a series number
 *   "parentId" indeciated which node this element belongs to
 *   "property" is the name of the object 
 *   "value" is the value of the object
 *   "type" will be "object", "array", "boolean", ...but we only
     use "object" and "array"
 *
 * @author Chen Lin clin@one-k.com
 * 2013/12/05 
 */

include_once( "define.php" );

class inflateJson
{
	    // input data
		private $input;

		// array of pointer to track the node (parents)
		private $pointerArray = array();

		// the input converted to array object
		private $flatArray = array();

		// error message
		public  $errorMessage;

	function __construct($str){
		$this -> input = $str;
	}
    
    // convert array to object
	public function inflate(){
		$temp = json_decode($this->input);

		// error checking
        if($temp == false){
        	$this->errorMessage = "inflate Json Decode failed.";
			return false;
		}

		// cast to array, the first level only
		$this->flatArray = (array)  $temp;
        
        // object to save the result and return
		$returnValue = new stdClass();

        // manually initial the first row of the pointer
		$this->pointerArray[0] = new stdClass();

		foreach( $this->flatArray as $aRow){
			// only object and array can have child element
			switch( $aRow->type ){
				case TYPE_OBJECT:
				    $this->pointerArray[ $aRow->id ] = new stdClass();
				    break;

				case TYPE_ARRAY:
				    $this->pointerArray[ $aRow->id ] = array();
				    break;

				default:
				    $this->pointerArray[ $aRow->id ] = $aRow->value;
			}
			$this->attachToParent( $aRow->id, $aRow->parentId, $aRow->property );
		}
        // only need the first node, 0 is link to 1.
		$returnValue = $this->pointerArray[ 1 ];
		return json_encode( $returnValue );
	}
    
    // the parent can be array or object
	private function attachToParent( $childId, $parentId, $propertyName ){
		// use the array to look up the type of parent
		if( gettype( $this->pointerArray[ $parentId ] ) == TYPE_OBJECT ){
			$this->pointerArray[ $parentId ] -> $propertyName = 
			    &$this->pointerArray[ $childId ];
		}else{
			$this->pointerArray[ $parentId ][] =
			    &$this->pointerArray[ $childId ];
		}
	}
}
